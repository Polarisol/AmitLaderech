//Some definitions first: 
//'Record' refers to a specific line in the data (a row)
//'Field' refers to a specific column name (for example 'Age')
//Every record might have values inside the various fields. some fields might be empty
//No function in this library should ever change the files it read (read only!)
//the library should have a utility text file called "processedRecords.txt" in which it keeps
//file names and the number of processed records for each of them.
//all functions should check to see if the file exists before trying to access it

//Returns the number of records in a database
//0 if the file does not exits
int CSVParser_GetNumberOfRecords(char filename[]);


//return the number of new records since the file was last marked as 'processed'
//Should refer to the utility file "processedRecords.txt"
//if the file name cannot be found in "processedRecords.txt" the function return the number
//of records in the database
//this function does not update "processedRecords.txt"
int CSVParser_NewRecords(char filename[]);


//Adds the 'numberOfNewProcessedRecords' to the previous number in the utility text file "processedRecords.txt"
void CSVParser_MarkAsProcessed(char filename[], int numberOfNewProcessedRecords);


//Copies the value of a specific field from a specific record into the 'value' string
//Returns 1 if the record and field exists (even if the value is an empty string)
//Returns 0 if there is no such record of field
int CSVParser_GetFieldFromRecord(char filename[], int recordNum, char fieldName[], char value[]);


//Returns the number of records that have a specific value in a specific field
int CSVParser_CountAllRecordsWithFieldValue(char filename[], char fieldName[], char value[]);


//Goes over the data and find the first 'number' of records with a specific value in a specific field
//put their record numbers (line numbers) in the 'recordNumbers' array
//put the values of the 'fieldToGet' field (strings) in the 2D array called 'recordValues'
//example: first string value will be in recordValues[0] (the first character will be in recordValues[0][0] second in recordValues[0][1] etc.)
void CSVParser_GetRecordsWithFieldValue(char filename[], char fieldName[], char value[], int number, int recordNumbers[],char fieldToGet[], char **recordValues);